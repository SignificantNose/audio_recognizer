name: Build the docker image and push it to the Docker Hug registry (with tests run beforehand)

on:
  workflow_call:
    inputs:
      service-dir-path:      
        description: The name of the directory containing the microservice related files
        required: true
        type: string
      service-name:
        description: The name of the main project directory containing the microservice
        type: string 
        required: true 
      
jobs:  
  build_and_test:

    runs-on: ubuntu-latest

    env:
      PROJECT_PATH: ${{inputs.service-dir-path}}/${{inputs.service-name}}/
      TESTS_PATH: ${{inputs.service-dir-path}}/Tests/

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies for ${{ inputs.service-name }} project
      run: dotnet restore $PROJECT_PATH

    - name: Restore dependencies for Tests project
      run: dotnet restore $TESTS_PATH 
    
    - name: Build ${{inputs.service-name}} project
      run: dotnet build --no-restore $PROJECT_PATH
    
    - name: Build Tests project 
      run: dotnet build --no-restore $TESTS_PATH

    - name: Test
      run: dotnet test --no-build --verbosity normal $TESTS_PATH


  pubilsh_image:
    
    runs-on: ubuntu-latest
    needs: build_and_test

    env:
      IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/svc${{inputs.service-name}}:latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build the image
        run: |
          docker build -t $IMAGE_TAG --file ${{ inputs.service-dir-path }}/Dockerfile .
      
      - name: Push the image to Docker Hub
        # uses: docker/build-push-action@v3
        # with:
        #   context: ${{ inputs.service-dir-path }}
        #   push: true
        #   tags: $IMAGE_TAG
        run: |
          docker push $IMAGE_TAG